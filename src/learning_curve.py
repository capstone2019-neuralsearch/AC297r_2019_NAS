"""
Harvard IACS
AC-297: Data Science Capstone

learning_curve.py
Process log file generated by NAS (neural architecture search).
Use it to generate charts of learning curves.

Michael S. Emanuel
Fri Oct 11 13:57:28 2019
"""

import numpy as np
import matplotlib as mpl
from matplotlib import pyplot as plt
from typing import List, Dict

# Data sets tested
datasets: List[str] = ['cifar-10', 'mnist', 'fashion-mnist', 'graphene']

# Folders with best experiment for each dataset
logfile_tbl: Dict[str, str] = {
    # 'cifar-10': '../experiments/eval-CIFAR-10-20191004-141028/log.txt',
    'cifar-10': 'eval-CIFAR-10-20191004-141028',
    'mnist': 'eval-MNIST-20191005-150239',
    'fashion-mnist': 'eval-FASHION-MNIST-20191005-150430',
    'graphene': 'eval-GRAPHENE-20191011-092207',
}
# Build absolute file name from folder for the experiment
for dataset, folder in logfile_tbl.items():
    logfile_tbl[dataset] = f'../experiments/{folder}/log.txt'

# Test scores (from test.txt in each experiment directory)
test_acc_tbl: Dict[str, float] = {
    'cifar-10': 97.10,
    'mnist': 99.28,
    'fashion-mnist': 0.9929,
    'graphene': 0.908478,
}

# Y-Label name
ylabel_tbl: Dict[str, str] = {
    'cifar-10': 'Accuracy %',
    'mnist': 'Accuracy %',
    'fashion-mnist': 'Accuracy %',
    'graphene': '$R^2 %$',
}

# Plot style
mpl.rcParams.update({'font.size': 20})

# *********************************************************************************************************************
def main():
    """Entry point for console program"""

    # Build plots for each data set
    for dataset in datasets[0:4]:
        logfile = logfile_tbl[dataset]
        fig, ax = plot_one(logfile=logfile, dataset=dataset)
        fig.savefig(fname=f'../visualization/{dataset}/learning_curve.png', bbox_inches='tight')

# *********************************************************************************************************************
def plot_one(logfile, dataset):
    """Plot learning curve"""
    # Read the logfile
    with open(logfile) as fh:
        lines = fh.readlines()
    
    # List with accuracy on train and validation data
    train_acc_list: List[float] = []
    valid_acc_list: List[float] = []
    
    # First 3 lines contain: gpu; argument string for train_search.py; parameter size   
    # Process remaining lines with training and validation losses
    for line in lines[3:]:
        process_one_line(line, train_acc_list, valid_acc_list)
        
    # Convert lists into numpy arrays and count number of epochs
    train_acc = np.array(train_acc_list)
    valid_acc = np.array(valid_acc_list)
    epochs: int = len(valid_acc)
    epoch_num = np.arange(epochs)+1
    
    # Horizontal line for test accuracy
    test_acc = test_acc_tbl[dataset] * np.ones(epochs)
    
    # Plot the loss vs. epoch
    fig, ax = plt.subplots(figsize=[16,10])
    ax.set_title(f'Learning Curve for {dataset}')
    ax.set_xlabel('Epoch')
    ax.set_ylabel(ylabel_tbl[dataset])
    ax.plot(epoch_num, train_acc, label='train')
    ax.plot(epoch_num, valid_acc, label='validation')
    ax.plot(epoch_num, test_acc, label='test')
    ax.legend()
    ax.grid()
        
    # print(f'Processed log file {fname} with {epochs} epochs.')
    return fig, ax

# *********************************************************************************************************************
def process_one_line(line: str, train_acc_list: List[str], valid_acc_list: List[str]):
    """Process one line of the log file; """
    
    # Strip off date time prefix and newline suffix
    # prefix_len = len('2019-10-11 09:22:12,995 ')
    prefix_len = 24
    entry = line[prefix_len:-1]
    
    # Types of lines to process are (1) train_acc (2) valid_acc
    if entry[0:9] == 'train_acc':
        entry = entry.replace('(R^2 for regression) ', '')
        # acc_idx = len('train_acc ')
        acc_idx = 10
        try:        
            train_acc_i = float(entry[acc_idx:])            
            train_acc_list.append(train_acc_i)        
        except:
            print('Bad line:')
            print(line)
    elif entry[0:9] == 'valid_acc':
        entry = entry.replace('(R^2 for regression) ', '')
        # acc_idx = len('valid_acc (R^2 for regression)')
        acc_idx = 10
        try:
            valid_acc_i = float(entry[acc_idx:])
            valid_acc_list.append(valid_acc_i)
        except:
            print('Bad line:')
            print(line)

# *********************************************************************************************************************
if __name__ == '__main__':
    main()
